import os
import sqlite3
import asyncio
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
bot = Bot(token=os.getenv("API_TOKEN"))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class GameStates(StatesGroup):
    selecting_goal = State()
    selecting_age = State()
    adding_comment = State()
    adding_game = State()
    waiting_comment_choice = State()
    moderating_game = State()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('camp_games.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS games (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT NOT NULL,
        goal TEXT NOT NULL,
        age TEXT NOT NULL,
        prep TEXT NOT NULL,
        rules TEXT NOT NULL,
        instruction TEXT NOT NULL,
        comments TEXT DEFAULT '',
        rating_sum INTEGER DEFAULT 0,
        rating_count INTEGER DEFAULT 0,
        plays_count INTEGER DEFAULT 0,
        status TEXT DEFAULT 'pending'
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS reviews (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        game_id INTEGER,
        user_id INTEGER,
        rating INTEGER,
        comment TEXT,
        moderated BOOLEAN DEFAULT FALSE,
        FOREIGN KEY (game_id) REFERENCES games (id)
    )''')
    conn.commit()
    conn.close()

init_db()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É"))
    builder.add(types.KeyboardButton(text="‚úè –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É"))
    return builder.as_markup(resize_keyboard=True)

async def yesnot_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–î–∞"))
    builder.add(types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return builder.as_markup(resize_keyboard=True)

async def goal_keyboard():
    goals = ["–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", "–ü–æ–¥–≤–∏–∂–Ω—ã–µ", "–°–ø–ª–æ—á–µ–Ω–∏–µ", "–°–∫–∞–Ω–µ—Ä", "–§–æ–Ω–æ–≤—ã–µ"]
    builder = ReplyKeyboardBuilder()
    for goal in goals:
        builder.add(types.KeyboardButton(text=goal))
    builder.add(types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    builder.adjust(2, 2, 1)
    return builder.as_markup(resize_keyboard=True)

async def age_keyboard():
    ages = ["7-9 –ª–µ—Ç", "10-12 –ª–µ—Ç", "13-15 –ª–µ—Ç", "16+", "–î–ª—è –≤—Å–µ—Ö"]
    builder = ReplyKeyboardBuilder()
    for age in ages:
        builder.add(types.KeyboardButton(text=age))
    builder.add(types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    builder.adjust(2, 2, 1)
    return builder.as_markup(resize_keyboard=True)

async def rating_keyboard(game_id):
    builder = ReplyKeyboardBuilder()
    for i in range(1, 6):
        builder.add(types.KeyboardButton(text=f"{1 * i}"))  # 1-5 –∑–≤–µ–∑–¥
    builder.add(types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    builder.adjust(5, 1)
    return builder.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–æ–∂–∞—Ç—ã—Ö üèïÔ∏è",
        reply_markup=await main_menu()
    )

@dp.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=await main_menu()
    )

@dp.message(lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É")
async def find_game(message: types.Message, state: FSMContext):
    await state.set_state(GameStates.selecting_goal)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–≥—Ä—ã:",
        reply_markup=await goal_keyboard()
    )

@dp.message(GameStates.selecting_goal, lambda message: message.text in ["–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", "–ü–æ–¥–≤–∏–∂–Ω—ã–µ", "–°–ø–ª–æ—á–µ–Ω–∏–µ", "–°–∫–∞–Ω–µ—Ä", "–§–æ–Ω–æ–≤—ã–µ"])
async def select_goal(message: types.Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await state.set_state(GameStates.selecting_age)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=await age_keyboard()
    )

@dp.message(GameStates.selecting_age, lambda message: message.text in ["7-9 –ª–µ—Ç", "10-12 –ª–µ—Ç", "13-15 –ª–µ—Ç", "16+", "–î–ª—è –≤—Å–µ—Ö"])
async def select_age(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    goal = user_data.get("goal")
    age = message.text
    
    conn = sqlite3.connect('camp_games.db')
    cursor = conn.cursor()
    
    games = {
        "–ù–æ–≤–∞—è": None,
        "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è": None,
        "–¢–æ–ø–æ–≤–∞—è": None
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã –∏–∑ –ë–î
        cursor.execute('''
        SELECT id, name, description FROM games 
        WHERE goal = ? AND (age = ? OR age = '–î–ª—è –≤—Å–µ—Ö') AND status = 'approved'
        ORDER BY rating_count ASC, 
        CASE WHEN rating_count > 0 THEN rating_sum*1.0/rating_count ELSE 0 END DESC 
        LIMIT 1
        ''', (goal, age))
        games["–ù–æ–≤–∞—è"] = cursor.fetchone()
        
        cursor.execute('''
        SELECT id, name, description FROM games 
        WHERE goal = ? AND (age = ? OR age = '–î–ª—è –≤—Å–µ—Ö') AND status = 'approved'
        ORDER BY rating_count DESC 
        LIMIT 1
        ''', (goal, age))
        games["–ü–æ–ø—É–ª—è—Ä–Ω–∞—è"] = cursor.fetchone()
        
        cursor.execute('''
        SELECT id, name, description FROM games 
        WHERE goal = ? AND (age = ? OR age = '–î–ª—è –≤—Å–µ—Ö') AND status = 'approved'
        ORDER BY 
        CASE WHEN rating_count > 0 THEN rating_sum*1.0/rating_count ELSE 0 END DESC 
        LIMIT 1
        ''', (goal, age))
        games["–¢–æ–ø–æ–≤–∞—è"] = cursor.fetchone()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–≥—Ä—ã:\n\n"
        for game_type, game in games.items():
            if game:
                game_id, name, desc = game
                response += f"üé≤ <b>{game_type}: {name}</b>\n"
                response += f"üìù {desc}\n"
                response += f"üîó /game_{game_id}\n\n"
        
        await message.answer(
            response,
            reply_markup=await main_menu(),
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä: {str(e)}",
            reply_markup=await main_menu()
        )
    finally:
        conn.close()
    await state.clear()

@dp.message(lambda message: message.text.startswith('/game_'))
async def show_full_game(message: types.Message, state: FSMContext):
    try:
        game_id = message.text.split('_')[1]
        await state.update_data(game_id=game_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º game_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        
        conn = sqlite3.connect('camp_games.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        cursor.execute('SELECT id FROM games WHERE id = ? AND status = "approved"', (game_id,))
        if not cursor.fetchone():
            await message.answer("üö´ –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            return
            
        cursor.execute('''
        SELECT name, prep, rules, instruction 
        FROM games 
        WHERE id = ? AND status = 'approved'
        ''', (game_id,))
        game = cursor.fetchone()
        
        if game:
            name, prep, rules, instruction = game
            response = (
                f"üéØ <b>{name}</b>\n\n"
                f"üîß <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:</b>\n{prep}\n\n"
                f"üìú <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n{rules}\n\n"
                f"üó£ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n{instruction}\n\n"
                "–û—Ü–µ–Ω–∏—Ç–µ –∏–≥—Ä—É:"
            )
            await message.answer(response, parse_mode="HTML", reply_markup=await rating_keyboard(game_id))
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()

@dp.message(GameStates.waiting_comment_choice, lambda message: message.text in ["–î–∞", "–ù–µ—Ç", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
async def handle_comment_choice(message: types.Message, state: FSMContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {message.text}")
    if message.text.lower() in ["–Ω–µ—Ç", "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"]:
        await state.clear()
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=await main_menu()
        )
    elif message.text.lower() == "–¥–∞":
        await state.set_state(GameStates.adding_comment)
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ adding_comment")
        
        builder = ReplyKeyboardBuilder()
        builder.add(types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–≥—Ä–µ:",
            reply_markup=builder.as_markup(resize_keyboard=True),
            parse_mode="HTML"
        )

@dp.message(GameStates.adding_game)
async def process_new_game(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != GameStates.adding_game:
        return
        
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É
    if "–ù–∞–∑–≤–∞–Ω–∏–µ:" in message.text and "–¶–µ–ª—å:" in message.text:
        await state.set_state(GameStates.adding_game)
        await process_new_game(message, state)
        return
    
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=await main_menu())
        return
    
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    user_data = await state.get_data()
    game_id = user_data.get('game_id')
    review_id = user_data.get('review_id')
    
    if not game_id or not review_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É", reply_markup=await main_menu())
        await state.clear()
        return
    
    conn = None
    try:
        conn = sqlite3.connect('camp_games.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å moderated=FALSE
        cursor.execute('''
        UPDATE reviews 
        SET comment = ?, moderated = FALSE
        WHERE id = ?
        ''', (message.text, review_id))
        
        conn.commit()
        
        await message.answer(
            "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
            reply_markup=await main_menu()
        )
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", reply_markup=await main_menu())
    finally:
        if conn:
            conn.close()
        await state.clear()
        

@dp.message(lambda message: message.text and any(str(i) in message.text for i in range(1, 6)))
async def rate_game(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        game_id = user_data.get('game_id')
        
        if not game_id:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞")
            return

        rating = int(message.text.strip()[0])
        if rating < 1 or rating > 5:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5")
            return

        conn = sqlite3.connect('camp_games.db')
        cursor = conn.cursor()
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä—ã
            cursor.execute('''
            UPDATE games 
            SET rating_sum = rating_sum + ?, 
                rating_count = rating_count + 1,
                plays_count = plays_count + 1
            WHERE id = ?
            ''', (rating, game_id))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—Ç–∑—ã–≤—ã –∏ –ø–æ–ª—É—á–∞–µ–º ID
            cursor.execute('''
            INSERT INTO reviews (game_id, user_id, rating)
            VALUES (?, ?, ?)
            ''', (game_id, message.from_user.id, rating))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º review_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            review_id = cursor.lastrowid
            await state.update_data(review_id=review_id)
            
            conn.commit()
            
            builder = ReplyKeyboardBuilder()
            builder.add(types.KeyboardButton(text="–î–∞"))
            builder.add(types.KeyboardButton(text="–ù–µ—Ç"))
            builder.adjust(2)
            
            await message.answer(
                f"‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
            
            await state.set_state(GameStates.waiting_comment_choice)
            
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        finally:
            conn.close()
            
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(lambda message: message.text == "‚úè –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É")
async def add_new_game(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.set_state(GameStates.adding_game)
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await message.answer(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã\n"
        "–¶–µ–ª—å: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ/–ü–æ–¥–≤–∏–∂–Ω—ã–µ/–°–ø–ª–æ—á–µ–Ω–∏–µ/–°–∫–∞–Ω–µ—Ä/–§–æ–Ω–æ–≤—ã–µ\n"
        "–í–æ–∑—Ä–∞—Å—Ç: 7-9 –ª–µ—Ç/10-12 –ª–µ—Ç/13-15 –ª–µ—Ç/16+/–î–ª—è –≤—Å–µ—Ö\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –ß—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å\n"
        "–ü—Ä–∞–≤–∏–ª–∞: –ö–∞–∫ –∏–≥—Ä–∞—Ç—å\n"
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å –¥–µ—Ç—è–º",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(GameStates.adding_game)
async def process_new_game(message: types.Message, state: FSMContext):
    try:
        parts = message.text.split('\n')
        game_data = {}
        for part in parts:
            if ':' in part:
                key, value = part.split(':', 1)
                game_data[key.strip()] = value.strip()
        
        conn = sqlite3.connect('camp_games.db')
        cursor = conn.cursor()
        
        cursor.execute('''
        INSERT INTO games (name, goal, age, description, prep, rules, instruction, status)
        VALUES (?, ?, ?, ?, ?, ?, ?, 'pending')
        ''', (
            game_data.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""),
            game_data.get("–¶–µ–ª—å", ""),
            game_data.get("–í–æ–∑—Ä–∞—Å—Ç", ""),
            game_data.get("–û–ø–∏—Å–∞–Ω–∏–µ", ""),
            game_data.get("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", ""),
            game_data.get("–ü—Ä–∞–≤–∏–ª–∞", ""),
            game_data.get("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "")
        ))
        conn.commit()
        
        await message.answer(
            "‚úÖ –ò–≥—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö.",
            reply_markup=await main_menu()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=await main_menu()
        )
    finally:
        conn.close()
        await state.clear()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())